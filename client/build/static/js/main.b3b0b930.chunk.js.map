{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isUserAuthorized","URLSearchParams","window","location","search","has","state","musicHistory","_this2","fetch","concat","process","REACT_APP_CLIENT_URL","then","res","json","data","setState","catch","error","console","log","Pusher","REACT_APP_PUSHER_KEY","cluster","REACT_APP_PUSHER_CLUSTER","encrypted","subscribe","bind","prevState","map","item","undefined","find","e","played_at","filter","Boolean","_this$state","connectSpotify","react_default","a","createElement","href","className","length","index","key","track_name","format","TableItem","Component","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAwGeA,qBAlGb,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,OACA,IACMI,IADY,IAAIC,gBAAgBC,OAAOC,SAASC,QACnBC,IAAI,cAH3B,OAKZZ,EAAKa,MAAQ,CACXN,mBACAO,aAAc,IAPJd,mFAWM,IAAAe,EAAAZ,KACWA,KAAKU,MAA1BN,mBAGNS,MAAK,GAAAC,OAAIC,8CAAYC,qBAAhB,aACFC,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAACG,GACLR,EAAKS,SAAS,CAAEV,aAAcS,MAE/BE,MAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,KAEjB,IAAIG,IAAJ,GAAAZ,OAAcC,8CAAYY,sBAAwB,CAC/DC,QAAO,GAAAd,OAAKC,8CAAYc,0BACxBC,WAAW,IAGUC,UAAU,WACzBC,KAAK,iBAAkB,SAACZ,GAC9BR,EAAKS,SAAS,SAACY,GAab,MAAO,CACLtB,aAbUS,EAAKT,aACduB,IAAI,SAACC,GAIJ,YAAkBC,IAHAH,EAAUtB,aAAa0B,KACvC,SAACC,GAAD,OAAOA,EAAEC,YAAcJ,EAAKI,YAGrBJ,EAEA,OAGVK,OAAOC,SAEU3B,OAAOmB,EAAUtB,qDAOpC,IAAA+B,EACoC1C,KAAKU,MAAxCN,EADDsC,EACCtC,iBAAkBO,EADnB+B,EACmB/B,aACpBgC,EAAiBvC,EACrB,GAEAwC,EAAAC,EAAAC,cAAA,KAAGC,KAAK,4CAAR,gCA6BF,OACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,6DAECH,EACwB,IAAxBhC,EAAasC,OAAeL,EAAAC,EAAAC,cAvBZ,kBACrBF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SACfJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,oBAGJF,EAAAC,EAAAC,cAAA,aAAQnC,EAAauB,IAAI,SAACI,EAAGY,GAAJ,OAnBb,SAACf,EAAMe,GAAP,OAChBN,EAAAC,EAAAC,cAAA,MAAIK,IAAKhB,EAAKI,WACZK,EAAAC,EAAAC,cAAA,UAAKI,EAAQ,GACbN,EAAAC,EAAAC,cAAA,UAAKX,EAAKiB,YACVR,EAAAC,EAAAC,cAAA,UAAKO,IAAOlB,EAAKI,UAAW,wBAeae,CAAUhB,EAAGY,SAYvB,MAAqB,cA5F1CK,cCOEd,QACW,cAA7BnC,OAAOC,SAASiD,UAEe,UAA7BlD,OAAOC,SAASiD,UAEhBlD,OAAOC,SAASiD,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.b3b0b930.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Pusher from \"pusher-js\";\r\nimport format from \"date-fns/format\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const isUserAuthorized = urlParams.has(\"authorized\") ? true : false;\r\n\r\n    this.state = {\r\n      isUserAuthorized,\r\n      musicHistory: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { isUserAuthorized } = this.state;\r\n\r\n    if (isUserAuthorized) {\r\n      fetch(`${process.env.REACT_APP_CLIENT_URL}/history`)\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          this.setState({ musicHistory: data });\r\n        })\r\n        .catch((error) => console.log(error));\r\n\r\n      const pusher = new Pusher(`${process.env.REACT_APP_PUSHER_KEY}`, {\r\n        cluster: `${process.env.REACT_APP_PUSHER_CLUSTER}`,\r\n        encrypted: true,\r\n      });\r\n\r\n      const channel = pusher.subscribe(\"spotify\");\r\n      channel.bind(\"update-history\", (data) => {\r\n        this.setState((prevState) => {\r\n          const arr = data.musicHistory\r\n            .map((item) => {\r\n              const isPresent = prevState.musicHistory.find(\r\n                (e) => e.played_at === item.played_at\r\n              );\r\n              if (isPresent === undefined) {\r\n                return item;\r\n              } else {\r\n                return null;\r\n              }\r\n            })\r\n            .filter(Boolean);\r\n          return {\r\n            musicHistory: arr.concat(prevState.musicHistory),\r\n          };\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isUserAuthorized, musicHistory } = this.state;\r\n    const connectSpotify = isUserAuthorized ? (\r\n      \"\"\r\n    ) : (\r\n      <a href=\"{process.env.REACT_APP_CLIENT_URL}/login\">\r\n        Connect your Spotify account\r\n      </a>\r\n    );\r\n\r\n    const TableItem = (item, index) => (\r\n      <tr key={item.played_at}>\r\n        <td>{index + 1}</td>\r\n        <td>{item.track_name}</td>\r\n        <td>{format(item.played_at, \"D MMM YYYY, hh:mma\")}</td>\r\n      </tr>\r\n    );\r\n\r\n    const RecentlyPlayed = () => (\r\n      <div className=\"recently-played\">\r\n        <h2>Recent Tracks</h2>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Song title</th>\r\n              <th>Time</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{musicHistory.map((e, index) => TableItem(e, index))}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"header\">\r\n          <h1>Spotify Listening History</h1>\r\n          <p>View your music history in realtime with Spotify</p>\r\n\r\n          {connectSpotify}\r\n          {musicHistory.length !== 0 ? <RecentlyPlayed /> : null}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}